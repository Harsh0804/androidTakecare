// Generated by view binder compiler. Do not edit!
package com.geekymusketeers.medify.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.geekymusketeers.medify.R;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySignUpBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final EditText SignUpEmail;

  @NonNull
  public final EditText SignUpName;

  @NonNull
  public final EditText SignUpPassword;

  @NonNull
  public final EditText SignUpPhone;

  @NonNull
  public final AutoCompleteTextView SignUpTypeOfDoctor;

  @NonNull
  public final ConstraintLayout constraintLayout3;

  @NonNull
  public final Button createAccount;

  @NonNull
  public final LinearLayout linearLayout2;

  @NonNull
  public final TextInputLayout menuDoctorType;

  @NonNull
  public final TextView signInSuggestion;

  @NonNull
  public final TextView signUpHeader;

  @NonNull
  public final TextView signUph2;

  @NonNull
  public final TextView toSignIn;

  private ActivitySignUpBinding(@NonNull ConstraintLayout rootView, @NonNull EditText SignUpEmail,
      @NonNull EditText SignUpName, @NonNull EditText SignUpPassword, @NonNull EditText SignUpPhone,
      @NonNull AutoCompleteTextView SignUpTypeOfDoctor, @NonNull ConstraintLayout constraintLayout3,
      @NonNull Button createAccount, @NonNull LinearLayout linearLayout2,
      @NonNull TextInputLayout menuDoctorType, @NonNull TextView signInSuggestion,
      @NonNull TextView signUpHeader, @NonNull TextView signUph2, @NonNull TextView toSignIn) {
    this.rootView = rootView;
    this.SignUpEmail = SignUpEmail;
    this.SignUpName = SignUpName;
    this.SignUpPassword = SignUpPassword;
    this.SignUpPhone = SignUpPhone;
    this.SignUpTypeOfDoctor = SignUpTypeOfDoctor;
    this.constraintLayout3 = constraintLayout3;
    this.createAccount = createAccount;
    this.linearLayout2 = linearLayout2;
    this.menuDoctorType = menuDoctorType;
    this.signInSuggestion = signInSuggestion;
    this.signUpHeader = signUpHeader;
    this.signUph2 = signUph2;
    this.toSignIn = toSignIn;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySignUpBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySignUpBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_sign_up, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySignUpBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.SignUp_Email;
      EditText SignUpEmail = ViewBindings.findChildViewById(rootView, id);
      if (SignUpEmail == null) {
        break missingId;
      }

      id = R.id.SignUp_Name;
      EditText SignUpName = ViewBindings.findChildViewById(rootView, id);
      if (SignUpName == null) {
        break missingId;
      }

      id = R.id.SignUp_Password;
      EditText SignUpPassword = ViewBindings.findChildViewById(rootView, id);
      if (SignUpPassword == null) {
        break missingId;
      }

      id = R.id.SignUp_Phone;
      EditText SignUpPhone = ViewBindings.findChildViewById(rootView, id);
      if (SignUpPhone == null) {
        break missingId;
      }

      id = R.id.SignUp_type_of_doctor;
      AutoCompleteTextView SignUpTypeOfDoctor = ViewBindings.findChildViewById(rootView, id);
      if (SignUpTypeOfDoctor == null) {
        break missingId;
      }

      id = R.id.constraintLayout3;
      ConstraintLayout constraintLayout3 = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayout3 == null) {
        break missingId;
      }

      id = R.id.createAccount;
      Button createAccount = ViewBindings.findChildViewById(rootView, id);
      if (createAccount == null) {
        break missingId;
      }

      id = R.id.linearLayout2;
      LinearLayout linearLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout2 == null) {
        break missingId;
      }

      id = R.id.menu_doctorType;
      TextInputLayout menuDoctorType = ViewBindings.findChildViewById(rootView, id);
      if (menuDoctorType == null) {
        break missingId;
      }

      id = R.id.sign_in_suggestion;
      TextView signInSuggestion = ViewBindings.findChildViewById(rootView, id);
      if (signInSuggestion == null) {
        break missingId;
      }

      id = R.id.signUpHeader;
      TextView signUpHeader = ViewBindings.findChildViewById(rootView, id);
      if (signUpHeader == null) {
        break missingId;
      }

      id = R.id.signUph2;
      TextView signUph2 = ViewBindings.findChildViewById(rootView, id);
      if (signUph2 == null) {
        break missingId;
      }

      id = R.id.toSignIn;
      TextView toSignIn = ViewBindings.findChildViewById(rootView, id);
      if (toSignIn == null) {
        break missingId;
      }

      return new ActivitySignUpBinding((ConstraintLayout) rootView, SignUpEmail, SignUpName,
          SignUpPassword, SignUpPhone, SignUpTypeOfDoctor, constraintLayout3, createAccount,
          linearLayout2, menuDoctorType, signInSuggestion, signUpHeader, signUph2, toSignIn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
